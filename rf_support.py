import numpy as np
import scipy.linalg as la
import re


def get_rf_params_from_vna_csv(filename, z0=50.0 + 0.0j):
	(freq_hz, Sdb, Sdeg)	 = get_sdb_from_vna_csv(filename)
	S = sdb2sri(Sdb, Sdeg)
	Z = s2z(S, z0)
	T = s2abcd(S, z0)
	
	return (freq_hz, S, Z, T, Sdb, Sdeg)

def get_sdb_from_vna_csv(filename):
	# Reads CSV generated by VNA
	# Extracts S params in DB/DEG form and returns freq, Sdb, Sdeg
	
	infile = open(filename, 'r')
	
	header_found = False
	Sdb_list = []
	Sdeg_list = []
	freq_hz_list = []
	for line in infile:
		nline = line.strip()
		nline_arr = nline.split(",")
		
		if not header_found:
			m = re.search("Freq", nline_arr[0])
			if (m): # found header
				header_found = True
		elif len(nline_arr) == 9:
			freq_hz_list.append( float(nline_arr[0]) )
			Sdb_f = np.array( [ [float(nline_arr[1]), float(nline_arr[3])], [float(nline_arr[5]), float(nline_arr[7]) ] ] )
			Sdeg_f = np.array( [ [float(nline_arr[2]), float(nline_arr[4])], [float(nline_arr[6]), float(nline_arr[8]) ] ] )
			Sdb_list.append(Sdb_f)
			Sdeg_list.append(Sdeg_f)
	
	Sdb = np.array(Sdb_list)
	Sdeg = np.array(Sdeg_list)
	freq_hz = np.array(freq_hz_list)
	
	return(freq_hz, Sdb, Sdeg)	

	
def s2z(S, z0):
	# Converts real/imag S params to z params
	Z = np.zeros( np.shape(S), dtype=complex)
	I = np.eye(2)
	for idx, SS in enumerate(S):
		ZZ = np.dot( la.inv( I - SS ), (I + SS) ) * z0
		Z[idx] = ZZ
		
	return(Z)
	

def z2s(Z, z0):
	# converts impedance matrix to scattering matrix
	S = np.zeros( np.shape(Z), dtype=complex)
	I = np.eye(2)
	for idx, ZZ in enumerate(Z):
		SS = np.dot( Z - z0*I, la.inv( Z + z0*I) )
		S[idx] = SS
	
	return(S)


def z2y(Z):
	# converts impedance matrix to admittance matrix
	Y = np.zeros( np.shape(Z), dtype=complex)
	for idx, ZZ in enumerate(Z):
		YY = la.inv(ZZ)
		Y[idx] = YY
	
	return(Y)
		

def z2abcd(Z):
	# Converts impedance matrix to transfer matrix (ABCD matrix)
	T = np.zeros( np.shape(Z), dtype=complex)
	for idx, ZZ in enumerate(Z):
		Z11 = ZZ[0][0]
		Z12 = ZZ[0][1]
		Z21 = ZZ[1][0]
		Z22 = ZZ[1][1]
		A = Z11 / Z21
		B = (Z11*Z22 - Z12*Z21) / Z21
		C = 1 / Z21
		D = Z22/ Z21
		
		
		Tf = np.array( [ [A, B], [C, D] ])
		T[idx] = Tf
	
	return(T)


#def abcd2s(T, z0):
#	
#	S = np.zeros( np.shape(T), dtype=complex)
#	for idx, TT in enumerate(T):
#		A = TT[0][0]
#		B = TT[0][1]
#		C = TT[1][0]
#		D = TT[1][1]
#		
#		denom = A + B/z0 + C*z0 + D
#		S11 = (A + B/z0 - C*z0 + D) / denom
#		S12 = 2*(A*D - B*C) / denom
#		S21 = 2/denom
#		S22 = (-A + B/z0-C*z0 + D ) / denom
#		
#		SS = np.array( [[S11, S12] , [S21, S22] ])
#		S[idx] = SS
#	
#	return(S)
#	
def abcd2s(abcd_struct, Z01, Z02):
	# convert ABCD matrix to S matrix in real/imag format

	R01 = Z01.real
	R02 = Z02.real
	num_freqs = len(abcd_struct)
	S = np.zeros( (num_freqs, 2, 2), dtype=complex )
	for idx, mat in enumerate(abcd_struct):
		mat = abcd_struct[idx]
		A = mat[0][0]
		B = mat[0][1]
		C = mat[1][0]
		D = mat[1][1]

		denom = (A*Z02 + B + C*Z01*Z02 + D*Z01)

		S11 = ( A*Z02 + B - C*np.conj(Z01)*Z02 - D*np.conj(Z01) ) / denom
		S12 = ( 2*(A*D - B*C)*np.sqrt(R01*R02) ) / denom
		S21 = ( 2*np.sqrt(R01*R02) ) / denom
		S22 = (-A*np.conj(Z02) + B - C*Z01*np.conj(Z02) + D*Z01 ) / denom

		S[idx][0][0] = S11
		S[idx][0][1] = S12
		S[idx][1][0] = S21
		S[idx][1][1] = S22


	return S	
	
	
	
#def s2abcd( S, z0):
#	Z = s2z(S, z0)
#	T = z2abcd(Z)
#	
#	return(T)
	
def s2abcd(S, Z01=50, Z02=50):
	# Convert Sparams in Real/Imag format to ABCD matrix
	R01 = Z01.real
	R02 = Z02.real
	abcd = np.zeros( np.shape(S), dtype=complex )
	for idx, SS in enumerate(S):
		S11 = SS[0][0]
		S12 = SS[0][1]
		S21 = SS[1][0]
		S22 = SS[1][1]

		denom = 2*S21*np.sqrt(R01*R02)
		
		
		A = ( (np.conj(Z01) + S11*Z01)*(1-S22)+S12*S21*Z01 ) / denom
		B = ( (np.conj(Z01) + S11*Z01)*(np.conj(Z02)+S22*Z02)-S12*S21*Z01*Z02 ) / denom
		C = ( (1-S11)*(1-S22)-S12*S21 ) / denom
		D = ( (1-S11)*(np.conj(Z02)+S22*Z02) + S12*S21*Z02 ) / denom

		abcd[idx][0][0] = A
		abcd[idx][0][1] = B
		abcd[idx][1][0] = C
		abcd[idx][1][1] = D


	return abcd
	
	
def sdb2sri(Sdb, Sdeg):
	# convert DB/DEG to real/imag
	num_freqs = len(Sdb)
	Sri = np.zeros( (num_freqs, 2, 2), dtype=complex)

	for idx in range(len(Sdb)):
		db_mat = Sdb[idx]
		S11_db = db_mat[0][0]
		S12_db = db_mat[0][1]
		S21_db = db_mat[1][0]
		S22_db = db_mat[1][1]

		deg_mat = Sdeg[idx]
		S11_deg = deg_mat[0][0]
		S12_deg = deg_mat[0][1]
		S21_deg = deg_mat[1][0]
		S22_deg = deg_mat[1][1]

		S11 = 10**(S11_db/20) * np.complex( np.cos(S11_deg*np.pi/180), np.sin(S11_deg*np.pi/180) )
		S12 = 10**(S12_db/20) * np.complex( np.cos(S12_deg*np.pi/180), np.sin(S12_deg*np.pi/180) )
		S21 = 10**(S21_db/20) * np.complex( np.cos(S21_deg*np.pi/180), np.sin(S21_deg*np.pi/180) )
		S22 = 10**(S22_db/20) * np.complex( np.cos(S22_deg*np.pi/180), np.sin(S22_deg*np.pi/180) )

		Sri[idx][0][0] = S11
		Sri[idx][0][1] = S12
		Sri[idx][1][0] = S21
		Sri[idx][1][1] = S22

	return Sri
	
	
def sri2sdb(sri_struct):
	# convert S params from Real/Imag to DB/Deg
	num_freqs = len(sri_struct)
	Sdb = np.zeros( (num_freqs, 2, 2))
	Sdeg = np.zeros( (num_freqs, 2, 2))

	for idx in range(len(sri_struct)):
		ri_mat = sri_struct[idx]
		S11_ri = ri_mat[0][0]
		S12_ri = ri_mat[0][1]
		S21_ri = ri_mat[1][0]
		S22_ri = ri_mat[1][1]

		S11_db = 20*np.log10( np.abs(S11_ri) )
		S12_db = 20*np.log10( np.abs(S12_ri) )
		S21_db = 20*np.log10( np.abs(S21_ri) )
		S22_db = 20*np.log10( np.abs(S22_ri) )

		S11_deg = np.arcsin( S11_ri.imag / np.abs(S11_ri) ) * 180/np.pi
		S12_deg = np.arcsin( S12_ri.imag / np.abs(S12_ri) ) * 180/np.pi
		S21_deg = np.arcsin( S21_ri.imag / np.abs(S21_ri) ) * 180/np.pi
		S22_deg = np.arcsin( S22_ri.imag / np.abs(S22_ri) ) * 180/np.pi
		
		if ( S11_ri.real < 0 ) and (S11_ri.imag > 0):
			S11_deg = 180 - S11_deg
		if ( S12_ri.real < 0 ) and (S12_ri.imag > 0):
			S12_deg = 180 - S12_deg
		if ( S21_ri.real < 0 ) and (S21_ri.imag > 0):
			S21_deg = 180 - S21_deg
		if ( S22_ri.real < 0 ) and (S22_ri.imag > 0):
			S22_deg = 180 - S22_deg
		

		Sdb[idx][0][0] = S11_db
		Sdb[idx][0][1] = S12_db
		Sdb[idx][1][0] = S21_db
		Sdb[idx][1][1] = S22_db

		Sdeg[idx][0][0] = S11_deg
		Sdeg[idx][0][1] = S12_deg
		Sdeg[idx][1][0] = S21_deg
		Sdeg[idx][1][1] = S22_deg

	return (Sdb, Sdeg)
	
	